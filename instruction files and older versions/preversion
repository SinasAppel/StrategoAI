#define _CRT_SECURE_NO_WARNINGS
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>
#include <ctime>

int* make_map(void)
{
	int map[25] = {};
	int set[10] = { 12, 11, 11, 1, 2, 2, 2, 3, 3, 10 }; // flag is 12 bom is 11 en 33 is water
	int set_check[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

	// vul de map random
	int R;
	for (int T1 = 0; T1 < 5; T1++)
	{
		for (int T2 = 0; T2 < 5; T2++)
		{
			int P = T2 + 5 * T1;
			if (T1 < 2)//speler 1
			{
				while (1)
				{
					R = rand() % 10;
					if (set_check[R] < 1)
					{
						map[P] = set[R] + 100;
						set_check[R] = 1;
						break;
					}
				}
			}
			else if (T1 > 2) // speler 2
			{
				while (1)
				{
					R = rand() % 10;
					if (set_check[R] < 2)
					{
						map[P] = set[R] + 200;
						set_check[R] = 2;
						break;
					}
				}
			}
		}
	}
	map[12] = 33;
	return &map[0];
}

void print_map(int *MP)
{
	int map[25] = {};
	for (int T3 = 0; T3 < 25; T3++){ map[T3] = MP[T3]; }

	for (int T1 = 0; T1 < 5; T1++)//print the map
	{
		for (int T2 = 0; T2 < 5; T2++)
		{
			int P = T2 + 5 * T1;
			int W = map[P] % 100;
			if (W == 33){ printf(" W "); }
			else if (W == 11){ printf(" B "); }
			else if (W == 12){ printf(" F "); }
			else if (W > 9)
			{
				printf("%i ", W);
			}
			else
			{
				printf(" %i ", W);
			}
		}
		printf("\n");
	}
}

int* P2_turn()
{
	int turn[2];
	printf("voer positie en richting in:\n");
	scanf(" %2d %1d", &turn[0], &turn[1]);
	return &turn[0];
}

int* P1_turn(int *map, int *move_map, int *turn_map)
{
	float moves_evaluated[100] = {};
	// calc moved pieces
	for (int T1 = 0; T1 < 25; T1++)
	{
		int WP = bool(turn_map[T1]);
		int WH = bool(map[T1]);
		if ((WP + WH) == 1){ move_map[T1] = 1; }
	}
	//evaluate moves
	float max[3] = { -10000, 0, 0 };
	for (int T2 = 0; T2 < 25; T2++)
	{
		int mijn_stuk = map[T2]/100;
		if (mijn_stuk == 1)
		{
			int move_offset[4] = { -5, 1, 5, -1 };
			for (int T3 = 0; T3 < 4; T3++)
			{
				int evaluation = 4 * T2 + T3;
				int targetP = T2 + move_offset[T3];
				int target_stuk = map[targetP];

				if (map[T2] % 100 == 11 || map[T2] % 100 == 12){ moves_evaluated[evaluation] = -9000; }
				else if (target_stuk / 100 == 1){ moves_evaluated[evaluation] = -9000; }
				else if (T2 % 4 == 0 && T3 == 1){ moves_evaluated[evaluation] = -9000; }
				else if (T2 % 5 == 0 && T3 == 3){ moves_evaluated[evaluation] = -9000; }
				else if (targetP < 0 || targetP > 24){ moves_evaluated[evaluation] = -9000; }

				else if (target_stuk / 100 == 2){ moves_evaluated[evaluation] = 10; }
				else if (target_stuk == 0){ moves_evaluated[evaluation] = 0; }
				if (moves_evaluated[evaluation] > max[0]){ max[0] = moves_evaluated[evaluation]; max[1] = T2; max[2] = T3; }
			}
		}
	}
	// determine max
	int turn[2] = { max[1], max[2] + 1};
	return &turn[0];
}

int doe_turn(int *MapP, int *MoveP)
{
	int target_position = 9000;
	int position = MoveP[0];
	//bepaal het vak waar hij heen wil bewegen
	if (MoveP[1] == 1) { target_position = position - 5; }
	else if (MoveP[1] == 2) { target_position = position + 1; }
	else if (MoveP[1] == 3) { target_position = position + 5; }
	else if (MoveP[1] == 4) { target_position = position - 1; }
	else{ printf("error, no direction"); return 1; }

	//waarde van stukken schijden
	int target_tile = MapP[target_position] % 100;
	int tile = MapP[position] % 100;

	//voorkom slechte bewegingen
	if (tile == 11 || tile == 12 || tile == 0){ printf("dat is geen bewegend stuk\n"); return 0; }//geen flaggen of bommen bewegen
	else if (target_tile == 33){ printf("je kan niet op water lopen\n"); return 0; }//niet op water lopen
	else if (position % 5 == 0 && target_position % 5 == 4){ printf("je kan daar niet heen\n"); return 0; }//niet over randen gaan
	else if (position % 5 == 4 && target_position % 5 == 0){ printf("je kan daar niet heen\n"); return 0; }
	else if (target_position < 0 || target_position > 25){ printf("je kan daar niet heen\n"); return 0; }
	else if (MapP[target_position] / 100 == MapP[position] / 100){ printf("je kan niet je eigenstukken bevechten\n"); }// niet je eigenstukken slaan
	// doe de beweging
	else if (target_tile == 0)// als hij beweegt
	{
		MapP[target_position] = MapP[position];
		MapP[position] = 0;
	}
	else if (target_tile == 11)// als hij een bom aanvalt
	{
		if (tile == 3)
		{
			MapP[target_position] = 3;
			MapP[position] = 0;
		}
		else
		{
			MapP[position] = 0;
		}
	}
	else if (target_tile == 12)// als hij de vlag aanvalt
	{
		MapP[target_position] = MapP[position];
		MapP[position] = 0;
		if (target_position < 12)
		{
			printf("P2 gewonnen\n");
			return 1;
		}
		else { printf("P1 gewonnen\n"); return 1; }
	}
	else if (target_tile > 0 && target_tile < 11)//als hij een stuk aanvalt
	{
		if (target_tile == 10 && tile == 1) // als een 1 een 10 aanvalt
		{
			MapP[target_position] = MapP[position];
			MapP[position] = 0;
		} 
		else if (target_tile < tile) //als het stuk wint
		{
			MapP[target_position] = MapP[position];
			MapP[position] = 0;
		}
		else if (target_tile > tile) //als het stuk verliest
		{
			MapP[position] = 0;
		}
		else if (target_tile == tile) // als ze het zelfde zijn
		{
			MapP[target_position] = 0;
			MapP[position] = 0;
		} 
	}
	else { printf("error, falid destination piece"); return 1; }
	return 0;
}

void main(void)
{
	srand(time(0));
	int map[25] = {};
	int move_map[25] = {}, turn_map[25] = {};
	int *MP = make_map();
	for (int T1 = 0; T1 < 25; T1++){ map[T1] = MP[T1]; }
	print_map(map);
	
	//prosess turn
	while (1)
	{
		for (int T2 = 0; T2 < 25; T2++){ turn_map[T2] = map[T2]; } // map opslaan
		//player 1
		int *MP = P2_turn();//p and direction 1 north 2 east 3 south 4 west
		int move[2] = { MP[0], MP[1] };
		if (doe_turn(map, move) == 1){ break; }
		//player 2
		int *MP2 = P1_turn(map, move_map, turn_map);//Ai
		int move2[2] = { MP2[0], MP2[1] };
		if (doe_turn(map, move2) == 1){ break; }
		printf("opponents move: %i %i\n", move2[0], move2[1]);
		//print map voor debug
		print_map(map);
	}
	getchar(); getchar();
}
